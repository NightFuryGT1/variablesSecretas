trigger:
- main

pool:
  name: Default

variables:
  - group: DockerVariables  # Utiliza las variables almacenadas en este grupo
  - name: imageName
    value: 'mi-aplicacion'
  - name: githubToken
    value: $(githubToken)  # Variable secreta con el token de GitHub

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: build
        repository: $(dockerHubUser)/$(imageName)
        dockerfile: Dockerfile
        tags: |
          latest
          $(Build.BuildId)

- stage: Deploy
  jobs:
  - job: Deploy
    steps:
    - task: Docker@2
      displayName: 'Push Docker image to Docker Hub'
      inputs:
        command: push
        repository: $(dockerHubUser)/$(imageName)
        tags: |
          latest
          $(Build.BuildId)
        containerRegistry: 'Docker Hub'
        dockerRegistryEndpoint: 'DockerHubConnection'

    - script: |
        echo "Autenticando en Docker Hub..."
        echo $(dockerHubPassword) | docker login -u $(dockerHubUser) --password-stdin
        echo "Haciendo pull de la última versión de la imagen..."
        docker pull $(dockerHubUser)/$(imageName):latest
      displayName: 'Pull Docker image from Docker Hub'

    - script: |
        echo "Deteniendo y eliminando contenedor existente si es necesario..."
        docker stop prueba || true
        docker rm prueba || true
      displayName: 'Stop and remove existing container'

    - script: |
        echo "Ejecutando contenedor con la nueva imagen..."
        docker run -d --name prueba -p 8080:80 $(dockerHubUser)/$(imageName):latest
      displayName: 'Run Docker container with updated image'



